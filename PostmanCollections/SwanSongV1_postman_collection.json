{
	"info": {
		"_postman_id": "d1e34535-2f6a-474f-8ab4-7f1d867d4142",
		"name": "SwanSongV1",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "/api/{version}/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ad2c9ca-f218-4e3c-b319-24c8d6723b59",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//var jsonData = JSON.parse(pm.responseBody);\r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.environment.set(\"token\", jsonData.jwtToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9308b393-a942-4d85-a07b-5d0e3289fb42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Test100@hotmail.com\",\r\n  \"password\": \"Password#1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/login"
					},
					"response": []
				}
			],
			"id": "fe60adef-b06f-4a46-a4c0-0cde9ad3ee04"
		},
		{
			"name": "Album",
			"item": [
				{
					"name": "/api/{version}/albums?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => { \r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_paging_schema')));\r",
									"});\r",
									"\r",
									"pm.test(\"albums present\", () => {\r",
									"    let json = pm.response.json();\r",
									"    let albums = json.data\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => {\r",
									"    let response = pm.response.json();  \r",
									"    pm.expect(response.pageNumber).to.eql(1);  \r",
									"    pm.expect(response.pageSize).to.eql(5);  \r",
									"    pm.expect(response.totalPages).to.greaterThan(2);\r",
									"    pm.expect(response.totalRecords).to.greaterThan(10);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1474866c-0b6b-48b1-ad17-0001d374f862"
							}
						}
					],
					"id": "ed51426d-b387-4c9c-923e-1613d6c59611",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search-by-letter/t (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  \r",
									"pm.test('Schema validation', () => { \r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Sandy Denny album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"    const album = albums.find(m => m.name === \"The North Star Grassman and the Ravens\");    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c3152293-c09f-4103-96d4-31cb93a7dcdb"
							}
						}
					],
					"id": "edb7e3a1-e937-4104-a96f-adf08ea49fff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/search-by-letter/t"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search-by-letter (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1cd87604-3370-40a4-b96d-a08edd71084f"
							}
						}
					],
					"id": "8e03edce-f32b-450d-81cf-9dd68cbda3dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/search-by-letter/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search/nevermind  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Nevermind album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"    const album = albums.find(m => m.name === \"Nevermind\");    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ae90a4c6-6617-40dc-82da-7f750ce1dae5"
							}
						}
					],
					"id": "880edfc6-7702-454f-8ac9-c9dcc1f108df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/search/nevermind"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search/test123 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has Nevermind album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"     pm.expect(albums).to.have.length == 0;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ec37791a-aa61-479f-bb83-bafb9552ffe1"
							}
						}
					],
					"id": "387cc288-2f55-43e4-8c92-b00a6efc5e08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/search/test123 "
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "10f09072-b8ff-4443-92aa-fdf55c624a4b"
							}
						}
					],
					"id": "95e3b726-480a-48c2-a544-07b1fc469eb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/search/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/8 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_schema')));\r",
									"});\r",
									"\r",
									"pm.test(\"Has Led Zeppelin 1 album\", function () {\r",
									"    let album = pm.response.json();    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"    pm.expect(album.name).to.eql(\"Led Zeppelin 1\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1a71f54b-ad7b-4e3d-986d-4a4b684f3634"
							}
						}
					],
					"id": "bf319c94-35e8-4a45-b0fc-e637a8d295cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/album/1"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/100000000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b888de4d-adb4-4c4b-875b-dffae183dbb1"
							}
						}
					],
					"id": "383ea45a-4ffc-4bc5-9d39-8b3500c42726",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/album/100000000"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9fae3e5d-963d-42ee-a9c5-7055f5ad6253"
							}
						}
					],
					"id": "e1ee2b77-8092-4aa7-b883-1597433f7311",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/album/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/artist/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									" \r",
									"pm.test(\"albums present\", () => {\r",
									"    let albums = pm.response.json();\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length > 5;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5c21d1cd-53f1-4993-9de2-d91c507fc338"
							}
						}
					],
					"id": "d393e717-c1c1-41db-b9c2-43ce43e28233",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/artist/1"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/artist/1000000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has no artist\", function () {\r",
									"    let artist = pm.response.json(); \r",
									"     pm.expect(artist).to.have.length == 0;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "36cce779-da1d-461b-adbf-b8059bb8a0fd"
							}
						}
					],
					"id": "d7e836b7-422e-4785-ab3f-3f375fff786c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/artist/1000000"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/artist/ (Fail 404)",
					"id": "1537fcc1-423e-444d-87ca-d7e16fc1fa99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/artist/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									" \r",
									"pm.test(\"Has album id greater than zero\", function () {  \r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"albumId\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1be04f8f-14f3-487b-a4a4-b0a8a3334492"
							}
						}
					],
					"id": "7b1f96b2-eaa4-437f-bb9e-5fd4b0f2f5c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"How the West was Won\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/albums/album/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/add (Insert) (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6317b1e8-febf-4b00-b7ba-28b3222c4785",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('action_fail_response_schema')));\r",
									"}); \r",
									" \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"console.log(jsonData.messages)\r",
									"\r",
									"pm.test(\"Has correct messages\", function () {\r",
									"    pm.expect(jsonData.messages).to.have.length == 2;\r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"Album name is required.\");  \r",
									"    pm.expect(jsonData.messages[1].text).to.eql(\"Album name length between 1 and 120.\");  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "17289769-1e7d-47aa-a130-4bd18f651a96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/albums/album/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/update (Update)  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e56fa84-fca7-4117-b8b2-32ac5e9b3323",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6aa17f09-6cea-4305-9ce8-4fbe5da8cead",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{albumId}},\r\n    \"name\": \"How The West Was Won 2\",\r\n    \"artistId\": 1,\r\n    \"artistName\": null,\r\n    \"releaseDate\": null,\r\n    \"recordedDate\": null,\r\n    \"labelId\": null, \r\n    \"studioId\": null, \r\n    \"length\": \"45:23\",\r\n    \"producers\": null,\r\n    \"arrangers\": null,\r\n    \"engineers\": null,\r\n    \"artwork\": null,\r\n    \"photo\": null,\r\n    \"songs\": null \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/albums/album/update"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/upload-photo/{{albumId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ba323df-4081-4a8a-83f2-d6e0f098b982",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6a7fe939-be77-4539-afe1-53664ed8f4f2",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"/D:/Software Development .net 8.1/swansong-api/SwanSong.xUnit.Test/Resources/thesongremainsthesame.jpg"
									],
									"src": "postman-cloud:///1ef2d67b-1634-4890-9b5e-2c4a2407f11b"
								}
							]
						},
						"url": "{{baseUrl}}/api/v1/albums/album/upload-photo/{{albumId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/{{albumId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c732aa52-275a-421b-a642-c0d67c989555",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f5ef8236-da14-4a04-b54a-aa9065be6c05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/album/{{albumId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/8888888 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eab417cb-151f-4e55-b543-761c4f4fae7d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fde1f297-30bc-4cd8-96c6-b50cfb09b276",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/album/8888888"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search-by-letter/@ (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No Albums\", () => {\r",
									"    let albums = pm.response.json();\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length == 0;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f11b3bf6-9133-4271-a3dd-a93312720a7e"
							}
						}
					],
					"id": "d6ead42a-99c9-4685-a0d8-0bbc45fda8c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/search-by-letter/@"
					},
					"response": []
				}
			],
			"id": "ff12e69f-6674-413a-8b6c-7737fa662ef1"
		},
		{
			"name": "Album Song",
			"item": [
				{
					"name": "/api/{version}/album/songs/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_schema')));\r",
									"}); \r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Album songs present\", () => {  \r",
									"    pm.expect(jsonData).to.have.length == 9;\r",
									"});\r",
									"\r",
									"pm.test(\"Check album song order\", () => { \r",
									"    let song1 = jsonData[0];\r",
									"    pm.expect(song1.side).to.eql(1);\r",
									"    pm.expect(song1.order).to.eql(1);\r",
									"    pm.expect(song1.song.title).to.eql(\"Good Times Bad Times\");\r",
									"\r",
									"    let song9 = jsonData[8];\r",
									"    pm.expect(song9.side).to.eql(2);\r",
									"    pm.expect(song9.order).to.eql(9);\r",
									"    pm.expect(song9.song.title).to.eql(\"How Many More Times\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b0f1f4ec-a887-42b6-96bf-729d2bbeaf31"
							}
						}
					],
					"id": "853fecd6-1ea3-4d27-8702-63306c201a47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/album/songs/1"
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/1000000 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									" \r",
									"pm.test(\"No Album songs\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "df16732f-28cd-4091-8c05-4a1a715be8d5"
							}
						}
					],
					"id": "e31878a8-5e04-4f81-b648-8439f7b5c578",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/album/songs/1000000"
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "45d3bad6-fb25-4841-8187-fc7c8764ccbd"
							}
						}
					],
					"id": "e9044d8b-814f-48e7-b169-23fe7b88b26c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1album/songs/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/add (to add songs to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has album id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the ablum\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"albumId\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "da2361b3-abf9-46ef-9f49-48ccf98a1085"
							}
						}
					],
					"id": "8e96e70e-b457-4790-b3c8-a37f6351560b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"name\": \"Better Days\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/albums/album/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/song/add (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c32e5083-fce7-4355-999e-8a80ab008111",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_add_schema')));\r",
									"}); \r",
									" \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has album song id greater than zero\", function () { \r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"    pm.expect(jsonData.songId).to.be.greaterThan(0); \r",
									"}); \r",
									"\r",
									"pm.environment.set(\"albumSongId\", jsonData.id);\r",
									"pm.environment.set(\"songId\", jsonData.songId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "430333a8-8ec0-41fa-b1a4-417455b41f46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"side\": 1,\r\n  \"order\": 1,\r\n  \"albumId\": {{albumId}},\r\n  \"song\": { \r\n    \"title\": \"Test Song 2\",\r\n    \"length\": \"04:23\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/album/songs/song/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/song/{{albumSongId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1f55c5c-0e45-4671-9554-77a3e294a891",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "94b8910c-395b-4ce9-a615-ac65db283e32",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/album/songs/song/{{albumSongId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/songs/song/{{songId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8aa7fb7f-3859-42fe-9afc-750b8946f49c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3811b98e-c3e6-4f5e-b2ea-41d0f2d056c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/songs/song/{{songId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/{{albumId}}  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2aa8d9aa-36ee-4c53-92d4-d2d9a70f8a4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4c0a39d9-0543-428d-a3e0-d5b8bc6bca18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/albums/album/{{albumId}}"
					},
					"response": []
				}
			],
			"id": "a1200dbb-8c0c-40ea-8ad8-86a749d9a87f"
		},
		{
			"name": "Artist",
			"item": [
				{
					"name": "/api/{version}/artists?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_paging_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"artists present\", () => {\r",
									"    pm.expect(jsonData.data).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => { \r",
									"    pm.expect(jsonData.pageNumber).to.eql(1);  \r",
									"    pm.expect(jsonData.pageSize).to.eql(5);  \r",
									"    pm.expect(jsonData.totalPages).to.greaterThan(3);\r",
									"    pm.expect(jsonData.totalRecords).to.greaterThan(10);   \r",
									"});"
								],
								"type": "text/javascript",
								"id": "5d4f3db1-5061-4ad2-a7b5-11c436b0981d"
							}
						}
					],
					"id": "866ee24f-f2aa-4d63-8486-89b1ff18cd2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"artists present\", () => { \r",
									"    pm.expect(jsonData).to.have.length > 5;\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Led Zeppelin\", function () {\r",
									"    let artists = pm.response.json(); \r",
									"    const artist = artists.find(m => m.name === \"Led Zeppelin\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "65a79920-e9de-4377-be8c-3c14258dfd40"
							}
						}
					],
					"id": "65739967-7572-4c98-9d71-8ea1f264a0d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/lookups"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search/denny (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Has Sandy Denny\", function () {    ; \r",
									"    const artist = jsonData.find(m => m.name === \"Sandy Denny\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ba4b7d37-79aa-478e-ae2d-4124d982909c"
							}
						}
					],
					"id": "ec3aa0d5-69a9-42cd-8f2d-70abedccc52a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/search/denny"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search/test123 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"No Artists\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "9b1a57b1-9e78-4049-a814-138928e3ee29"
							}
						}
					],
					"id": "cbaabd94-f701-4b4e-9e3c-1cb914974dfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/search/test123"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "431a4f95-5cfd-4851-a61b-a5e8306664a3"
							}
						}
					],
					"id": "b8865a33-1611-4a10-8189-b27752866041",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/search/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search-by-letter/n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Has Nirvana\", function () { \r",
									"    const artist = jsonData.find(m => m.name === \"Nirvana\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a09ce4f5-3527-430b-ace8-0ee5d6961a51"
							}
						}
					],
					"id": "f4c457fb-c704-4d24-b8dc-bd98558d9535",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/search-by-letter/n"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search-by-letter/@ (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"No Artists\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "e046a4cd-76b3-4802-982d-0d83c7c0686d"
							}
						}
					],
					"id": "898f3b5e-b1c5-41a5-9a67-6ea52335c647",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/search-by-letter/@"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search-by-letter/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "809e945a-5d49-4110-b35a-937cf3902bf1"
							}
						}
					],
					"id": "845caeb2-1e1a-49f1-b333-886fb8946d33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/search-by-letter/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ea05ecd-8efe-425e-b243-efebbdfdfcc9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_lookup_schema')));\r",
									"});  \r",
									"\r",
									"pm.test(\"Has artists\", function () {\r",
									"    let artists = pm.response.json(); \r",
									"    const artist = artists.find(m => m.name === \"Sandy Denny\");    \r",
									"    pm.expect(artist).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "be2ca19e-e640-4c35-a0e5-5e7fb6127249",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/lookups"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has Led Zeppelin\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.name).to.eql(\"Led Zeppelin\"); \r",
									"});"
								],
								"type": "text/javascript",
								"id": "5974710a-d387-4618-b38d-71169ea894b5"
							}
						}
					],
					"id": "c2bccd8a-97f2-4440-8cae-de3baf598c87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/artist/1"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "78b47d55-7553-456f-a20f-9ab0373877a4"
							}
						}
					],
					"id": "35ac59ca-28dc-496c-93b7-eed091afd728",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/artist/"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a1b61bd-9684-4e0d-ba22-c4289c7e72f1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has artist id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"artistId\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0384e251-b36f-42cc-96cd-1338f4b5db6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"name\": \"Tom Petty\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/artists/artist/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/update (Update) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7235320-17e6-4271-bf71-2a42697445b9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "210e0af1-fe43-4c5d-8e40-8ea989579a15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": {{artistId}},\r\n  \"name\": \"Tom Petty 2\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/artists/artist/update"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/upload-photo/{{artistId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82ee01e2-c0cb-4124-ba17-339438e17961",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "42effed5-3285-40b1-a33a-3018aa51a565",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"/D:/Software Development .net 8.1/swansong-api/SwanSong.xUnit.Test/Resources/sandydenny.jpg"
									],
									"src": "postman-cloud:///1ef2d67c-ee54-4cb0-b3d4-c8af5beccfa6"
								}
							]
						},
						"url": "{{baseUrl}}/api/v1/artists/artist/upload-photo/{{artistId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/delete/{{artistId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fdb3f5f-9f04-401a-bc5f-f6481757bb9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "89a675ce-1cf6-4ef0-8761-64e70ab429f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/artist/{{artistId}}"
					},
					"response": []
				}
			],
			"id": "5170e4bd-9405-4b97-80ac-39e7cd7d5402"
		},
		{
			"name": "Member",
			"item": [
				{
					"name": "/api/{version}/members/member/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0d7f07a-3ee1-408b-987e-bd8ab4d7fb06",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('member_schema')));\r",
									"}); \r",
									"\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6acdc5df-d707-47c0-9193-63e5800ce4b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/members/member/1"
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/100000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43c73790-2bb2-449d-a7ac-c167a0ccfabc",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "03d5fba7-85e0-4141-9295-c60bccdb83f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/members/member/100000"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/add (to add members to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test(\"Has artist id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"artistId\", jsonData.id);"
								],
								"type": "text/javascript",
								"id": "8af42ec7-5417-4731-bb7b-3175cdbd67d9"
							}
						}
					],
					"id": "a6c7b1c6-66df-434d-9a3a-b493a890649c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"Test Group\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/artists/artist/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3801339d-b1fb-438e-897a-a52567757ff6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									" \r",
									"pm.test(\"Has member id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the member\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"});\r",
									" \r",
									"pm.environment.set(\"memberId\", jsonData.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "800db59d-38d4-41ad-b0a9-e3dfa498cfea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"artistId\": 20,\r\n  \"stageName\": \"Test Member\",\r\n  \"firstName\": \"Test\",\r\n  \"middleName\": null,\r\n  \"surname\": \"Member\",\r\n  \"photo\": null,\r\n  \"dateOfBirth\": \"2021-09-29T14:19:12.947Z\",\r\n  \"dateOfDeath\": \"2021-09-30T14:19:12.947Z\",\r\n  \"birthPlaceId\": 0  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/members/member/add"
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/update (Update) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "484528c6-3136-4503-a7bb-e5f6ffde8f26",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bd8bc839-f1b5-4c89-bb7c-e2b847810a6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{memberId}},\r\n  \"artistId\": {{artistId}},\r\n  \"stageName\": \"Test Member 2\",\r\n  \"firstName\": \"Test\",\r\n  \"middleName\": null,\r\n  \"surname\": \"Member\",\r\n  \"photo\": null,\r\n  \"dateOfBirth\": \"2021-09-29T14:19:12.947Z\",\r\n  \"dateOfDeath\": \"2021-09-30T14:19:12.947Z\",\r\n  \"birthPlaceId\": 0 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/members/member/update"
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/upload-photo/{{memberId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fda9468d-1b82-47e9-b752-45c13321d215",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "97fd9296-6849-43e3-b365-0fcf6c845a95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef2d67c-ee54-4cb0-b3d4-c8af5beccfa6"
								}
							]
						},
						"url": "{{baseUrl}}/api/v1/members/member/upload-photo/{{memberId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/members?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_paging_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"members present\", () => { \r",
									"    let members = jsonData.data\r",
									"    pm.expect(members).to.be.an(\"array\");\r",
									"    pm.expect(members).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => { \r",
									"    pm.expect(jsonData.pageNumber).to.eql(1);  \r",
									"    pm.expect(jsonData.pageSize).to.eql(5);  \r",
									"    pm.expect(jsonData.totalPages).to.greaterThan(1);\r",
									"    pm.expect(jsonData.totalRecords).to.greaterThan(9);   \r",
									"});"
								],
								"type": "text/javascript",
								"id": "64e600b6-896a-4eb9-b5c2-f9d067f6b5e8"
							}
						}
					],
					"id": "03f8c082-8855-43f4-b20d-5ba8cba860f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/{{memberId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c7a06dc-87a9-4f48-813b-356f5a011afd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "64f9df70-31b0-4f73-9baf-20c9c4a41578",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/members/member/{{memberId}}"
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/{{artistId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77c54150-4f32-4a3d-a02a-14bb50715a50",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d08abf31-06d9-4a8e-8b0a-e67925040634",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/artists/artist/{{artistId}}"
					},
					"response": []
				}
			],
			"id": "f45a9eaf-3e15-419d-b0a6-76085bdaa34d"
		},
		{
			"name": "Lookup",
			"item": [
				{
					"name": "Country",
					"item": [
						{
							"name": "/api/{version}/countries/country/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has country id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the country\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"countryId\", jsonData.id);\r",
											"pm.environment.set(\"countryUpdateName\", jsonData.name);"
										],
										"type": "text/javascript",
										"id": "8ef90d71-58e7-430e-b5a2-8eff63627f77"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils = {\r",
											"    isItemInArray: function(json, keyname, value) {\r",
											"            return Object.keys(json).some(key => {\r",
											"            return typeof json[key] === 'object' ? \r",
											"                this.isItemInArray(json[key], keyname, value) : key === keyname && json[key] === value;\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"id": "e92b0a2a-0bae-489c-b638-171a20ed3dfd"
									}
								}
							],
							"id": "0f7bc2dd-5497-4f8f-8f7a-cf3ded7354f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Germany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/countries/country/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc924bac-682a-4043-9016-86ab89732122",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9172ff2f-dd13-46e1-8be7-5b501c8c2097",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Germany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/countries/country/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "058a66ac-981b-4a8b-8e6c-d0372e0bb3b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e08f4c90-9afa-4de9-ba4a-c20536b36504",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{countryId}},\r\n    \"Name\": \"{{countryUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/countries/country/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6545480-8139-45ee-b9d4-c9ca3108e568",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1b2fe9ee-090a-47a2-b25b-5ae7513400ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{countryId}},\r\n    \"Name\": \"GermanyGermanyGermanyGermanyGermanyGermanyGermanyGermanyGermany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/countries/country/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"countries present\", () => {  \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has England\", function () { \r",
											"    const country = jsonData.find(m => m.name === \"England\");    \r",
											"    pm.expect(country).to.be.an(\"object\", \"Could not find the country\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "fdbc5551-32cd-4772-ab37-dbe39748234a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "1c3d2992-c991-46a7-8a50-1a319d3a3f2b"
									}
								}
							],
							"id": "55c3eabc-582b-4e94-91e7-52c888049b65",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/v1/countries"
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/{{countryId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bf54b89-2d19-4b29-b224-2c3a698bd3f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1e7f1cb6-143f-41eb-a62e-247704a5feaa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/countries/country/{{countryId}}"
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eff74bec-3b37-47bf-91f1-0a36430f64ba",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "87537069-1146-457e-8a29-327a90377ccb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/countries/country/300"
							},
							"response": []
						}
					],
					"id": "4c0bc34b-79b9-4971-98f5-6d7332aa72a4"
				},
				{
					"name": "BirthPlace",
					"item": [
						{
							"name": "/api/{version}/birth-places/birth-place/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ef90d71-58e7-430e-b5a2-8eff63627f77",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has birthPlace id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the birthPlace\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"}); \r",
											"\r",
											"pm.environment.set(\"birthPlaceId\", jsonData.id);\r",
											"pm.environment.set(\"birthPlaceUpdateName\", jsonData.name);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e92b0a2a-0bae-489c-b638-171a20ed3dfd",
										"exec": [
											"utils = {\r",
											"    isItemInArray: function(json, keyname, value) {\r",
											"            return Object.keys(json).some(key => {\r",
											"            return typeof json[key] === 'object' ? \r",
											"                this.isItemInArray(json[key], keyname, value) : key === keyname && json[key] === value;\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "36845a6d-b52f-42d4-becf-0790550a22bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Oundle\",\r\n    \"CountryId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/birth-places/birth-place/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc924bac-682a-4043-9016-86ab89732122",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_exists')));\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9e977463-9390-4849-87d6-d58167b522f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Oundle\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/birth-places/birth-place/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "058a66ac-981b-4a8b-8e6c-d0372e0bb3b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "44560da2-84f4-42e7-bc91-2525b72f937a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{birthPlaceId}},\r\n    \"Name\": \"{{birthPlaceUpdateName}}\",\r\n    \"CountryId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/birth-places/birth-place/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6545480-8139-45ee-b9d4-c9ca3108e568",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "733fa0d1-339a-40e7-b746-3de86eec0b2a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{birthPlaceId}},\r\n    \"Name\": \"OundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundle\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/birth-places/birth-place/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdbc5551-32cd-4772-ab37-dbe39748234a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"birthPlaces present\", () => {  \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has Oundle\", function () { \r",
											"    const birthPlace = jsonData.find(m => m.name === \"Oundle\");    \r",
											"    pm.expect(birthPlace).to.be.an(\"object\", \"Could not find the birth place\");\r",
											"    pm.expect(birthPlace.countryId).to.be.eq(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c3d2992-c991-46a7-8a50-1a319d3a3f2b",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5d0e4e45-e2d3-496f-bdea-e668333a347d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/v1/birth-places"
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/{{countryId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bf54b89-2d19-4b29-b224-2c3a698bd3f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ec7a0e46-8c63-4dc7-bbf4-9795e2c144e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/birth-places/birth-place/{{birthPlaceId}}"
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eff74bec-3b37-47bf-91f1-0a36430f64ba",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a8690441-39ed-4d5b-a67f-8f575bdb346a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/birth-places/birth-place/300"
							},
							"response": []
						}
					],
					"id": "e0b2502d-25f1-454b-a7f7-706a5c83006a"
				},
				{
					"name": "Studio",
					"item": [
						{
							"name": "/api/{version}/studios/studio/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has studio id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the studio\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"studioId\", jsonData.id);\r",
											"pm.environment.set(\"studioUpdateName\", jsonData.name);"
										],
										"type": "text/javascript",
										"id": "81164964-b56c-4046-b0f3-3eab74e1f0e5"
									}
								}
							],
							"id": "d8def807-948e-44e7-b9a1-2402ec2b3e52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test Studio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/studios/studio/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2c8780d-e8aa-448c-a311-d57a30d9dc6b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_exists')));\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "89156cab-3d26-40c0-bf7f-07a0b9bee1da",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test Studio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/studios/studio/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "855884ad-8efe-4b75-9979-5930c5855ea0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e5b930ae-1268-40bf-bb26-572a9411b184",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{studioId}},\r\n    \"Name\": \"{{studioUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/studios/studio/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "673bc7fb-e80d-42f4-8c28-3a5a73588381",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e6f1c38b-a1c2-4798-84c8-fb864ac371e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{studioId}},\r\n    \"Name\": \"studiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/studios/studio/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"studios present\", () => { \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has Island Studios\", function () { \r",
											"    const studio = jsonData.find(m => m.name === \"Island Studios London, Sound Techniques London\");    \r",
											"    pm.expect(studio).to.be.an(\"object\", \"Could not find the studio\");\r",
											"});\r",
											"   \r",
											"pm.test(\"The response contains a valid studio name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"studioUpdateName\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"id": "ef1d701e-3b3d-4555-af57-c5d6ec182917"
									}
								}
							],
							"id": "b817f5cf-4872-473a-995c-ac14d21bb771",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/v1/studios"
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/{{studioId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05cba148-d585-488f-9bea-20a06bb907f4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "37479de5-d573-458c-b773-bbfed9a44312",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/studios/studio/{{studioId}}"
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24a9def2-75f8-42b4-8a8a-ce3c64b39c3b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c644e360-a3be-4c8a-a160-2455028d2a82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/studios/studio/300"
							},
							"response": []
						}
					],
					"id": "f57005e1-045e-447b-8c58-08cb73b9b0a5"
				},
				{
					"name": "Record Label",
					"item": [
						{
							"name": "/api/{version}/record-labels/record-label/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has record label id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the record label\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"recordLabelId\", jsonData.id);\r",
											"pm.environment.set(\"recordLabelUpdateName\", jsonData.name);"
										],
										"type": "text/javascript",
										"id": "07b13073-1d7e-461c-8286-86a0aeb7ef7a"
									}
								}
							],
							"id": "50586df9-9338-469a-b2c8-eed8ac9f3d8d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Tyke Records\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/record-labels/record-label/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "171558f2-6713-4d98-a8d5-468e9bf226e9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_exists')));\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "314736d6-34e5-495c-b726-7ec41b329a6f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Tyke Records\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/record-labels/record-label/add"
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dbc3693-98ef-4ebf-b60e-94df26c66d3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7147fe78-114a-4985-b8f4-285208a6e4ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{recordLabelId}},\r\n    \"Name\": \"{{recordLabelUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/record-labels/record-label/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23dda5df-d3e7-4212-a247-b88cb7855e64",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b547de43-3b6b-4ef7-a4e0-a5989f34914d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{recordLabelId}},\r\n    \"Name\": \"studiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/record-labels/record-label/update"
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"record-labels present\", () => {   \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"}); \r",
											"\r",
											"pm.test(\"Has Atlantic Records\", function () { \r",
											"    const recordLabel = jsonData.find(m => m.name === \"Atlantic Records\");    \r",
											"    pm.expect(recordLabel).to.be.an(\"object\", \"Could not find the record label\");\r",
											"});\r",
											"   \r",
											"pm.test(\"The response contains a valid record label name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"recordLabelUpdateName\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"id": "accf71a3-c339-40a5-945a-4cd8e8d8739d"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "e21cdbf5-ae61-4a4e-b8c3-450c1160e3ba"
									}
								}
							],
							"id": "3b5bcece-e01f-4daf-b0e0-d65d34313a0d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/v1/record-labels"
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/{{recordLabelId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d1b5048-1526-42ac-9033-20b9851e8291",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4bc70998-bc7d-4d53-a64b-0738aade79d6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/record-labels/record-label/{{recordLabelId}}"
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecb65999-ae50-4085-83e7-f5f7db413074",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c90de6da-c62c-461f-8e0b-99bb7e2aec3a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/v1/record-labels/record-label/300"
							},
							"response": []
						}
					],
					"id": "654b8796-37dd-41e7-a9fd-f30f733f7658"
				}
			],
			"id": "ce99c8b8-edbf-4c03-a066-fab99f296f4d"
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "/api/{version}/register",
					"id": "245f5301-52fc-4daf-9307-da8a13768907",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"FirstName\": \"Tom\",\r\n  \"LastName\": \"Williams\",\r\n  \"Email\": \"johnwmiller33@hotmail.com\",\r\n  \"Password\": \"Password#1\",\r\n  \"ConfirmPassword\": \"Password#1\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/register"
					},
					"response": []
				}
			],
			"id": "ee69ab38-60f4-417d-86a1-d9237770a7df"
		},
		{
			"name": "New Folder",
			"item": [],
			"id": "9834e2f9-0451-4bd5-9ab2-ab6d00057dda"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "0fe4c3f8-e23b-4d0e-83a5-98c32193e056"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "65be7eb8-6b33-4627-bc75-668168500569"
			}
		}
	]
}