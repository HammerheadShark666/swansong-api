{
	"info": {
		"_postman_id": "d1e34535-2f6a-474f-8ab4-7f1d867d4142",
		"name": "SwanSongV1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4654363"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "/api/{version}/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//var jsonData = JSON.parse(pm.responseBody);\r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.environment.set(\"token\", jsonData.jwtToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Test100@hotmail.com\",\r\n  \"password\": \"Password#1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Album",
			"item": [
				{
					"name": "/api/{version}/albums?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => { \r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_paging_schema')));\r",
									"});\r",
									"\r",
									"pm.test(\"albums present\", () => {\r",
									"    let json = pm.response.json();\r",
									"    let albums = json.data\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => {\r",
									"    let response = pm.response.json();  \r",
									"    pm.expect(response.pageNumber).to.eql(1);  \r",
									"    pm.expect(response.pageSize).to.eql(5);  \r",
									"    pm.expect(response.totalPages).to.greaterThan(2);\r",
									"    pm.expect(response.totalRecords).to.greaterThan(10);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search-by-letter/t (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  \r",
									"pm.test('Schema validation', () => { \r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Sandy Denny album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"    const album = albums.find(m => m.name === \"The North Star Grassman and the Ravens\");    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/search-by-letter/t",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"search-by-letter",
								"t"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search-by-letter (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/search-by-letter/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"search-by-letter",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search/nevermind  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Nevermind album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"    const album = albums.find(m => m.name === \"Nevermind\");    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/search/nevermind",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"search",
								"nevermind"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search/test123 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has Nevermind album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"     pm.expect(albums).to.have.length == 0;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/search/test123 ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"search",
								"test123 "
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/search/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"search",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/8 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_schema')));\r",
									"});\r",
									"\r",
									"pm.test(\"Has Led Zeppelin 1 album\", function () {\r",
									"    let album = pm.response.json();    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"    pm.expect(album.name).to.eql(\"Led Zeppelin 1\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/100000000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/100000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"100000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/artist/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									" \r",
									"pm.test(\"albums present\", () => {\r",
									"    let albums = pm.response.json();\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length > 5;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/artist/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"artist",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/artist/1000000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has no artist\", function () {\r",
									"    let artist = pm.response.json(); \r",
									"     pm.expect(artist).to.have.length == 0;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/artist/1000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"artist",
								"1000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/artist/ (Fail 404)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/artist/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"artist",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									" \r",
									"pm.test(\"Has album id greater than zero\", function () {  \r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"albumId\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"How the West was Won\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/add (Insert) (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('action_fail_response_schema')));\r",
									"}); \r",
									" \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"console.log(jsonData.messages)\r",
									"\r",
									"pm.test(\"Has correct messages\", function () {\r",
									"    pm.expect(jsonData.messages).to.have.length == 2;\r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"Album name is required.\");  \r",
									"    pm.expect(jsonData.messages[1].text).to.eql(\"Album name length between 1 and 120.\");  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/update (Update)  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{albumId}},\r\n    \"name\": \"How The West Was Won 2\",\r\n    \"artistId\": 1,\r\n    \"artistName\": null,\r\n    \"releaseDate\": null,\r\n    \"recordedDate\": null,\r\n    \"labelId\": null, \r\n    \"studioId\": null, \r\n    \"length\": \"45:23\",\r\n    \"producers\": null,\r\n    \"arrangers\": null,\r\n    \"engineers\": null,\r\n    \"artwork\": null,\r\n    \"photo\": null,\r\n    \"songs\": null \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/upload-photo/{{albumId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "thesongremainsthesame.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/upload-photo/{{albumId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"upload-photo",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/{{albumId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/{{albumId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/8888888 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/8888888",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"8888888"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/search-by-letter/@ (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No Albums\", () => {\r",
									"    let albums = pm.response.json();\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length == 0;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/search-by-letter/@",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"search-by-letter",
								"@"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Album Song",
			"item": [
				{
					"name": "/api/{version}/album/songs/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_schema')));\r",
									"}); \r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Album songs present\", () => {  \r",
									"    pm.expect(jsonData).to.have.length == 9;\r",
									"});\r",
									"\r",
									"pm.test(\"Check album song order\", () => { \r",
									"    let song1 = jsonData[0];\r",
									"    pm.expect(song1.side).to.eql(1);\r",
									"    pm.expect(song1.order).to.eql(1);\r",
									"    pm.expect(song1.song.title).to.eql(\"Good Times Bad Times\");\r",
									"\r",
									"    let song9 = jsonData[8];\r",
									"    pm.expect(song9.side).to.eql(2);\r",
									"    pm.expect(song9.order).to.eql(9);\r",
									"    pm.expect(song9.song.title).to.eql(\"How Many More Times\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/album/songs/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"album",
								"songs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/1000000 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									" \r",
									"pm.test(\"No Album songs\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/album/songs/1000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"album",
								"songs",
								"1000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1album/songs/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1album",
								"songs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/add (to add songs to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has album id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the ablum\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"albumId\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"name\": \"Better Days\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/song/add (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_add_schema')));\r",
									"}); \r",
									" \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has album song id greater than zero\", function () { \r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"    pm.expect(jsonData.songId).to.be.greaterThan(0); \r",
									"}); \r",
									"\r",
									"pm.environment.set(\"albumSongId\", jsonData.id);\r",
									"pm.environment.set(\"songId\", jsonData.songId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"side\": 1,\r\n  \"order\": 1,\r\n  \"albumId\": {{albumId}},\r\n  \"song\": { \r\n    \"title\": \"Test Song 2\",\r\n    \"length\": \"04:23\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/album/songs/song/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"album",
								"songs",
								"song",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/album/songs/song/{{albumSongId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/album/songs/song/{{albumSongId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"album",
								"songs",
								"song",
								"{{albumSongId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/songs/song/{{songId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/songs/song/{{songId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"songs",
								"song",
								"{{songId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/albums/album/{{albumId}}  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/albums/album/{{albumId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"albums",
								"album",
								"{{albumId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Artist",
			"item": [
				{
					"name": "/api/{version}/artists?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_paging_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"artists present\", () => {\r",
									"    pm.expect(jsonData.data).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => { \r",
									"    pm.expect(jsonData.pageNumber).to.eql(1);  \r",
									"    pm.expect(jsonData.pageSize).to.eql(5);  \r",
									"    pm.expect(jsonData.totalPages).to.greaterThan(3);\r",
									"    pm.expect(jsonData.totalRecords).to.greaterThan(10);   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"artists present\", () => { \r",
									"    pm.expect(jsonData).to.have.length > 5;\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Led Zeppelin\", function () {\r",
									"    let artists = pm.response.json(); \r",
									"    const artist = artists.find(m => m.name === \"Led Zeppelin\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/lookups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"lookups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search/denny (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Has Sandy Denny\", function () {    ; \r",
									"    const artist = jsonData.find(m => m.name === \"Sandy Denny\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/search/denny",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"search",
								"denny"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search/test123 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"No Artists\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/search/test123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"search",
								"test123"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/search/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"search",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search-by-letter/n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Has Nirvana\", function () { \r",
									"    const artist = jsonData.find(m => m.name === \"Nirvana\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/search-by-letter/n",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"search-by-letter",
								"n"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search-by-letter/@ (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"No Artists\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/search-by-letter/@",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"search-by-letter",
								"@"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/search-by-letter/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/search-by-letter/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"search-by-letter",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_lookup_schema')));\r",
									"});  \r",
									"\r",
									"pm.test(\"Has artists\", function () {\r",
									"    let artists = pm.response.json(); \r",
									"    const artist = artists.find(m => m.name === \"Sandy Denny\");    \r",
									"    pm.expect(artist).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/lookups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"lookups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has Led Zeppelin\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.name).to.eql(\"Led Zeppelin\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has artist id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"artistId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"name\": \"Tom Petty\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/update (Update) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": {{artistId}},\r\n  \"name\": \"Tom Petty 2\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/upload-photo/{{artistId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sandydenny.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/upload-photo/{{artistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"upload-photo",
								"{{artistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/delete/{{artistId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/{{artistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"{{artistId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Member",
			"item": [
				{
					"name": "/api/{version}/members/member/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('member_schema')));\r",
									"}); \r",
									"\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/member/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"member",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/100000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/member/100000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"member",
								"100000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/add (to add members to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test(\"Has artist id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"artistId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"Test Group\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									" \r",
									"pm.test(\"Has member id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the member\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"});\r",
									" \r",
									"pm.environment.set(\"memberId\", jsonData.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"artistId\": 20,\r\n  \"stageName\": \"Test Member\",\r\n  \"firstName\": \"Test\",\r\n  \"middleName\": null,\r\n  \"surname\": \"Member\",\r\n  \"photo\": null,\r\n  \"dateOfBirth\": \"2021-09-29T14:19:12.947Z\",\r\n  \"dateOfDeath\": \"2021-09-30T14:19:12.947Z\",\r\n  \"birthPlaceId\": 0  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/member/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"member",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/update (Update) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{memberId}},\r\n  \"artistId\": {{artistId}},\r\n  \"stageName\": \"Test Member 2\",\r\n  \"firstName\": \"Test\",\r\n  \"middleName\": null,\r\n  \"surname\": \"Member\",\r\n  \"photo\": null,\r\n  \"dateOfBirth\": \"2021-09-29T14:19:12.947Z\",\r\n  \"dateOfDeath\": \"2021-09-30T14:19:12.947Z\",\r\n  \"birthPlaceId\": 0 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/member/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"member",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/upload-photo/{{memberId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sandydenny.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/member/upload-photo/{{memberId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"member",
								"upload-photo",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_paging_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"members present\", () => { \r",
									"    let members = jsonData.data\r",
									"    pm.expect(members).to.be.an(\"array\");\r",
									"    pm.expect(members).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => { \r",
									"    pm.expect(jsonData.pageNumber).to.eql(1);  \r",
									"    pm.expect(jsonData.pageSize).to.eql(5);  \r",
									"    pm.expect(jsonData.totalPages).to.greaterThan(1);\r",
									"    pm.expect(jsonData.totalRecords).to.greaterThan(9);   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/members/member/{{memberId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/member/{{memberId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"member",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/{version}/artists/artist/{{artistId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/artists/artist/{{artistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"artists",
								"artist",
								"{{artistId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lookup",
			"item": [
				{
					"name": "Country",
					"item": [
						{
							"name": "/api/{version}/countries/country/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has country id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the country\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"countryId\", jsonData.id);\r",
											"pm.environment.set(\"countryUpdateName\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils = {\r",
											"    isItemInArray: function(json, keyname, value) {\r",
											"            return Object.keys(json).some(key => {\r",
											"            return typeof json[key] === 'object' ? \r",
											"                this.isItemInArray(json[key], keyname, value) : key === keyname && json[key] === value;\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Germany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries/country/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"country",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Germany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries/country/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"country",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{countryId}},\r\n    \"Name\": \"{{countryUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries/country/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"country",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{countryId}},\r\n    \"Name\": \"GermanyGermanyGermanyGermanyGermanyGermanyGermanyGermanyGermany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries/country/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"country",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"countries present\", () => {  \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has England\", function () { \r",
											"    const country = jsonData.find(m => m.name === \"England\");    \r",
											"    pm.expect(country).to.be.an(\"object\", \"Could not find the country\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/{{countryId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries/country/{{countryId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"country",
										"{{countryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/countries/country/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/countries/country/300",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"countries",
										"country",
										"300"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BirthPlace",
					"item": [
						{
							"name": "/api/{version}/birth-places/birth-place/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has birthPlace id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the birthPlace\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"}); \r",
											"\r",
											"pm.environment.set(\"birthPlaceId\", jsonData.id);\r",
											"pm.environment.set(\"birthPlaceUpdateName\", jsonData.name);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils = {\r",
											"    isItemInArray: function(json, keyname, value) {\r",
											"            return Object.keys(json).some(key => {\r",
											"            return typeof json[key] === 'object' ? \r",
											"                this.isItemInArray(json[key], keyname, value) : key === keyname && json[key] === value;\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Oundle\",\r\n    \"CountryId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places/birth-place/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places",
										"birth-place",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_exists')));\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Oundle\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places/birth-place/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places",
										"birth-place",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{birthPlaceId}},\r\n    \"Name\": \"{{birthPlaceUpdateName}}\",\r\n    \"CountryId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places/birth-place/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places",
										"birth-place",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{birthPlaceId}},\r\n    \"Name\": \"OundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundleOundle\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places/birth-place/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places",
										"birth-place",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"birthPlaces present\", () => {  \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has Oundle\", function () { \r",
											"    const birthPlace = jsonData.find(m => m.name === \"Oundle\");    \r",
											"    pm.expect(birthPlace).to.be.an(\"object\", \"Could not find the birth place\");\r",
											"    pm.expect(birthPlace.countryId).to.be.eq(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/{{countryId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places/birth-place/{{birthPlaceId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places",
										"birth-place",
										"{{birthPlaceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/birth-places/birth-place/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/birth-places/birth-place/300",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"birth-places",
										"birth-place",
										"300"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Studio",
					"item": [
						{
							"name": "/api/{version}/studios/studio/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has studio id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the studio\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"studioId\", jsonData.id);\r",
											"pm.environment.set(\"studioUpdateName\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test Studio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios/studio/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios",
										"studio",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_exists')));\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test Studio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios/studio/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios",
										"studio",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{studioId}},\r\n    \"Name\": \"{{studioUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios/studio/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios",
										"studio",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{studioId}},\r\n    \"Name\": \"studiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios/studio/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios",
										"studio",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"studios present\", () => { \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has Island Studios\", function () { \r",
											"    const studio = jsonData.find(m => m.name === \"Island Studios London, Sound Techniques London\");    \r",
											"    pm.expect(studio).to.be.an(\"object\", \"Could not find the studio\");\r",
											"});\r",
											"   \r",
											"pm.test(\"The response contains a valid studio name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"studioUpdateName\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/{{studioId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios/studio/{{studioId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios",
										"studio",
										"{{studioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/studios/studio/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/studios/studio/300",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"studios",
										"studio",
										"300"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Record Label",
					"item": [
						{
							"name": "/api/{version}/record-labels/record-label/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has record label id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the record label\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"recordLabelId\", jsonData.id);\r",
											"pm.environment.set(\"recordLabelUpdateName\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Tyke Records\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels/record-label/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels",
										"record-label",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_exists')));\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Tyke Records\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels/record-label/add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels",
										"record-label",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{recordLabelId}},\r\n    \"Name\": \"{{recordLabelUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels/record-label/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels",
										"record-label",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_fail_validation_schema_name')));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{recordLabelId}},\r\n    \"Name\": \"studiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels/record-label/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels",
										"record-label",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"record-labels present\", () => {   \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"}); \r",
											"\r",
											"pm.test(\"Has Atlantic Records\", function () { \r",
											"    const recordLabel = jsonData.find(m => m.name === \"Atlantic Records\");    \r",
											"    pm.expect(recordLabel).to.be.an(\"object\", \"Could not find the record label\");\r",
											"});\r",
											"   \r",
											"pm.test(\"The response contains a valid record label name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"recordLabelUpdateName\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/{{recordLabelId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels/record-label/{{recordLabelId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels",
										"record-label",
										"{{recordLabelId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/{version}/record-labels/record-label/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/record-labels/record-label/300",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"record-labels",
										"record-label",
										"300"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "/api/{version}/register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"FirstName\": \"Tom\",\r\n  \"LastName\": \"Williams\",\r\n  \"Email\": \"johnwmiller33@hotmail.com\",\r\n  \"Password\": \"Password#1\",\r\n  \"ConfirmPassword\": \"Password#1\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}